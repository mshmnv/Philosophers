* deadlock

#include <pthread.h>


int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
	(attr - NULL | start_routine - функция над arg)



int pthread_join(pthread_t thread, void **retval);
	(retval = NULL)
	- waits for the thread


int pthread_detach(pthread_t thread);
	- When a detached thread terminates, its resources are automatically released back to the system
	- внутри потока (в start_routine ф-и)


** MUTEX **

int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
	(restrict attr = NULL)
int pthread_mutex_lock (pthread_mutex_t *mutex);
	- один поток заблокировал мьютекс -> другой не может это сделать (ждет пока будет разблокирован)
int pthread_mutex_unlock (pthread_mutex_t *mutex);



** SEMAPHOR ** (philo_two/philo_three)

sem_init(sem_t *sem, int pshared, unsigned int value);
	- value > 0 (сколько вилок)
int sem_wait(sem_t *sem);
	- value-- (если value > 0)
int sem_post(sem_t *sem);
	- value++ (другой поток ждет пока value станет > 0)

sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);
	- creates a new POSIX semaphore or opens an existing semaphore
	- oflag: Option flags
		* O_CREAT
		* O_EXCL - creating a new semaphore, O_EXCL causes sem_open() to fail if a semaphore with sem_name already exists
	- mode: (input) Permission flags
int sem_close(sem_t *sem);
	- is used to indicate that the calling process is finished using the named semaphore indicated by sem
int sem_unlink(const char *name);
	- removes the named semaphore referred to by name immediately. The semaphore is destroyed once all other processes that have the semaphore open close it.


TESTS

forever:
	./philo_one 5 800 200 200
	./philo_one 4 410 200 200
die:
	./philo_one 5 410 200 200
	./philo_one 4 310 200 100

